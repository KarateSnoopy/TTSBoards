local pageList = {}
local pageListS = {}

function onLoad(save_state)
  for i = 1, 54 do
    table.insert(pageList, "Rulebook Page " .. i)
  end
  for i = 1, 122 do
    table.insert(pageListS, "Scenario Page " .. i)
  end
end

function cleanArea(params)
  local pos = params[1].getPosition()
  local selfObject = params[2]
  selfObject.setPosition({pos.x - 5, pos.y + 1, pos.z + 12})
  local bagPos = {pos.x + 0.62, pos.y + 1, pos.z - 33}
  local envelopes = Global.getTable("envelopes")
  local name = selfObject.getName()
  local hittedBag = false

  local hitlist = Physics.cast({
    origin = bagPos,
    direction = {0, 1, 0},
    type = 2,
    size = {3, 3, 3},
    max_distance = 0,
    debug = false
  }) -- returns {{Vector point, Vector normal, float distance, Object hit_object}, ...}

  for i, j in pairs(hitlist) do
    if j.hit_object.tag == "Bag" and j.hit_object.getName() ~= "Summons" then
      hittedBag = j.hit_object
    end
  end

  if hittedBag then
    local _, _, zone = playerCheck(pos.x)
    for u, v in pairs(getObjectFromGUID(zone).getObjects()) do
      if v.getGUID() ~= "dff000" and v.getGUID() ~= "42d2b6" and v ~= selfObject and v.getName() ~= "Remove Player" and v ~= hittedBag then
        hittedBag.putObject(v)
      end
    end
    hittedBag.setDescription("Repacked")
    hittedBag.setPositionSmooth({pos.x, pos.y + 1, pos.z + 12}, false, true)
  end


  selfObject.setPosition(bagPos)
  selfObject.setRotation({0, 180, 0})

  Timer.destroy("bag_" .. selfObject.guid)
  Timer.create({
    identifier = "bag_" .. selfObject.guid,
    function_name = "checkInside",
    function_owner = self,
    parameters = {name, pos, selfObject},
    delay = 0.5
  })
  params[1].destruct()
end

function checkInside(params)
  local envelopes = Global.getTable("envelopes")
  local bag = params[3]
  local posMat = params[2]
  local bagContent = {}
  for i, j in pairs(bag.getObjects()) do
    local name = j.name
    if name:find('Player Mat') then
      bagContent.playerMat = {
        guid = j.guid,
        pos = posMat,
        lock = true,
        state = envelopes[params[1]].state,
        hide = true,
        PM = true
      }
    end
    if name == "Character Mat" then
      bagContent.charMat = {
        guid = j.guid,
        pos = {posMat.x + 2.2, posMat.y + 1, posMat.z - 0.3}
      }
    end
    if name == params[1] then

      bagContent.figure = {
        guid = j.guid,
        pos = {posMat.x, posMat.y + 1, posMat.z + 6}
      }
    end
    if name == "Starting Abilities" then
      bagContent.startAbi = {
        guid = j.guid,
        pos = {posMat.x, posMat.y + 1, posMat.z - 6},
        draw = true
      }
    end
    if name == "Advanced Abilities" and Global.getTable("setup").advancedAbilities then
      bagContent.advAbi = {
        guid = j.guid,
        pos = {posMat.x + - 3.2, posMat.y + 2, posMat.z - 32.4}
      }
    end
    if name == "Summons" then
      bagContent.summons = {
        guid = j.guid,
        pos = {posMat.x + 9.45, posMat.y + 2, posMat.z + 2.2}
      }
    end
    if name == "Trackers" then
      bagContent.trackers = {
        guid = j.guid,
        pos = {posMat.x + 7.7, posMat.y + 1, posMat.z + 2.2}
      }
    end
    if name == "Character Sheet" then
      bagContent.charSheet = {
        guid = j.guid,
        pos = {posMat.x + 6.31, posMat.y + 1, posMat.z - 34.23}
      }
    end
    if name == "Attack Modifiers" and Global.getTable("setup").advancedModifiers then
      bagContent.attMod = {
        guid = j.guid,
        pos = {posMat.x + - 7, posMat.y + 2, posMat.z - 31.5}
      }
    end
    if name == "You Died" or name:match("%d+ hp") then
      bagContent.hp = {
        guid = j.guid,
        pos = {posMat.x + 9.3, posMat.y + 1, posMat.z - 4.58}
      }
    end
    if name:find("Noob") or name:match("%d+ xp") then
      bagContent.xp = {
        guid = j.guid,
        pos = {posMat.x + 9.3, posMat.y + 1, posMat.z - 6.37}
      }
    end
  end

  local color, _, _, deckGUID = playerCheck(posMat.x)
  local amDeck = nil
  for u, v in pairs(bagContent) do
    local content = bag.takeObject({
      position = v.pos,
      smooth = false,
      guid = v.guid
    })
    if v.PM then content.setRotation({0, 180, 0}) end
    if not bag.getDescription():find("Repacked") then
      if v.state then
        if v.state < #content.getStates() + 2 then
          content = content.setState(v.state)
        end
      end
      if v.hide and Global.getTable("setup").hidePMTooltip then content.tooltip = false end
      if v.draw then
        local player = ""
        Wait.frames(function() content.deal(13, color) end, 5)
      end
    else
      if u == "attMod" then
        amDeck = {content, v.pos}
      end
    end
    if v.lock then content.lock() end
  end

  if not bag.getDescription():find("Repacked") then
    getObjectFromGUID("6c775e").takeObject({position = {posMat.x + 9.3, posMat.y + 1, posMat.z - 4.58}, rotation = {0, 180, 0}, callback_function = function(obj) obj.setState(envelopes[params[1]].life) end, smooth = false})
    getObjectFromGUID("0625c4").takeObject({position = {posMat.x + 9.3, posMat.y + 1, posMat.z - 6.37}, rotation = {0, 180, 0}, smooth = false})

    local modDeck = getObjectFromGUID(deckGUID).takeObject({position = {posMat.x - 4.7, posMat.y + 1, posMat.z + 3.4}, rotation = {0, 180, 180}, smooth = false})
    modDeck.shuffle()
    if bag.getName() == "Beast Tyrant" then
      bagObj = bag.getObjects()
      bag.deal(#bagObj, color)
    end
  else
    bagObj = bag.getObjects()
    bag.deal(#bagObj, color)
    Timer.create({
      identifier = "putBack" .. bag.getGUID(),
      function_name = "putBack",
      function_owner = self,
      parameters = {bag, color, {posMat.x - 4.7, posMat.y + 1, posMat.z + 3.4}, amDeck},
      delay = 2
    })
  end
end

function putBack(params)
  for _, ho in pairs(Player[params[2]].getHandObjects(1)) do
    if ho.tag == "Deck" then
      if ho.getDescription():find("Player") then
        ho.setPosition(params[3])
      else
        if params[4] ~= nil then
          params[4][1].setPosition(params[3])
          ho.setPosition(params[4][2])
        end
      end
    elseif ho.tag ~= "Card" and ho.getName() ~= "Bear Companion" then
      params[1].putObject(ho)
    end
  end
end

function playerCheck(x)
  local player, num, zone, modDeck
  if x < - 20 then
    player = "Red"
    num = 1
    zone = "49a4e0"
    modDeck = "bb85b9"
  elseif x < 0 then
    player = "White"
    num = 2
    zone = "dac936"
    modDeck = "d23231"
  elseif x < 20 then
    player = "Blue"
    num = 3
    zone = "62cd94"
    modDeck = "74238d"
  else
    player = "Green"
    num = 4
    zone = "963318"
    modDeck = "20d00f"
  end
  return player, num, zone, modDeck
end

function exSetState(params)
  params[1].setState(params[2])
end

function onObjectLeaveContainer(container, leave_object)
  local find = container.getName():find("Standee")
  if not find then
    find = container.getName():find("Horizontal")
    if not find then
      find = container.getName():find("Vertical")
    end
  end

  if find ~= nil then
    if monsters[container.getName():sub(1, find - 2)] then
      local monsterName = leave_object.getName()
      local numbers = {}
      for i = 1, monsters[monsterName].count do
        table.insert(numbers, i)
      end
      local hitlist = Physics.cast({
        origin = {0, 1, 0},
        direction = {0, 1, 0},
        type = 3,
        size = {100, 2, 50},
        max_distance = 0,
        debug = false
      })
      local removedNumbers = ""
      for _, j in pairs(hitlist) do
        if j.hit_object.getName():find(monsterName) then
          local str = j.hit_object.getName():gsub(monsterName, "")
          local num = tonumber(str)
          if num ~= nil then
            for x, i in pairs(numbers) do
              if i == num then
                removedNumbers = removedNumbers .. x .. "(" .. i .. ")" .. "|"
                table.remove(numbers, x)
              end
            end
          end
        end
      end
      local numbs = ""
      for x, i in pairs(numbers) do
        numbs = numbs .. x .. "(" .. i .. ")" .. "|"
      end

      local delay = 0.5
      if monsters[monsterName].count == #numbers then delay = 1 end
      rand = math.random(1, #numbers)
      if numbers[rand] == nil then
        broadcastToAll("All " .. monsterName .. " are on the table!", {1, 0, 0})
        leave_object.destruct()
      else
        leave_object.setName(leave_object.getName() .. " " .. numbers[rand])
        if not leave_object.getDescription():find("Horizontal") and not leave_object.getDescription():find("Vertical") then
          Timer.create({
            identifier = leave_object.getGUID() .. numbers[rand],
            function_name = "setNumber",
            function_owner = self,
            parameters = {leave_object, numbers[rand]},
            delay = delay
          })
        end
      end
    end
  end
end

function setNumber(params)
  local monsterObject = params[1]
  local number = params[2]
  monsterObject.UI.setAttribute("number", "image", number)
end

function spawnMonster(params)
  function spawnMonsterCoRoutine()
    local takeDelay = 0.1
    local monster = nil
    local monsterRotation = {0.00, 0.00, 0.00}
    local monsterPosition = params.monsterPosition
    local boss = false
    local delay = 0.5
    if params.monsterType ~= "Standee" then monsterRotation = {0.00, 180.00, 0.00} end

    local hitlist = Physics.cast({
      origin = {72.5, 1.71, 0},
      direction = {0, 1, 0},
      type = 3,
      size = {20, 1, 50},
      max_distance = 0,
      debug = false
    })

    for i, j in pairs(hitlist) do
      if j.hit_object.getName() == params.monsterName then
        monster = j.hit_object
      end
    end

    local pos, bagOffset = findFreeSpot()
    local figureBag = findMonster(params.monsterName)
    if figureBag then
      if figureBag.getName() == "Inox Bodyguard 2" and monsterPosition ~= nil then
        figureBag.setPosition(monsterPosition)
        return 1
      end
    end
    if monster ~= nil then
      if not figureBag and pos ~= nil then
        local partySheet = nil
        local statSheetHeight = 0.1
        for _, obj in pairs(getAllObjects()) do
          if obj.getDescription():find("Party Sheet") then
            partySheet = obj
          end
        end
        getObjectFromGUID("f01091").takeObject({
          position = pos,
          rotation = {0.00, 180.00, 0.00},
          smooth = false
        }).lock()
        wait(takeDelay)
        local brownBag = monster.takeObject({
          position = {pos[1], pos[2], - 27},
          smooth = false
        })
        wait(takeDelay)
        for _, obj in pairs(brownBag.getObjects()) do
          if obj.name == "Boss" then
            boss = true
          end
        end
        local rotationStatSheet = {monsters[params.monsterName].rotationStatSheet[1], monsters[params.monsterName].rotationStatSheet[2], monsters[params.monsterName].rotationStatSheet[3]}
        if partySheet ~= nil then
          local sl = tonumber(partySheet.UI.getAttribute("scenarioLevel", "Text"))
          if not boss then
            if sl > 3 then
              if rotationStatSheet[2] > 180 then statSheetHeight = 0.23 end
              if rotationStatSheet[3] > 90 then
                rotationStatSheet[3] = 0
                statSheetHeight = 0.23
              else
                rotationStatSheet[3] = 180
              end
            else
              if rotationStatSheet[2] < 181 then statSheetHeight = 0.23 end
              if rotationStatSheet[3] > 90 then
                statSheetHeight = 0.1
              end
            end
            rotationStatSheet[2] = rotationStatSheet[2] - (sl % 4) * 90
          else
            rotationStatSheet[2] = rotationStatSheet[2] - (sl % 4) * 90
            if sl > 3 then
              statSheetHeight = 0.23
              rotationStatSheet[3] = 180
            end
          end
          if params.monsterName == "City Archer" or params.monsterName == "Living Corpse" or params.monsterName == "Bandit Commander" then
            if statSheetHeight == 0.23 then
              statSheetHeight = 0.1
            else
              statSheetHeight = 0.23
            end
          end
        end

        for _, obj in pairs(brownBag.getObjects()) do
          if boss then
            monsterRotation = {0.00, 0.00, 0.00}
            if monsterPosition == nil then monsterPosition = getMonsterPos({x = pos[1] - bagOffset, y = pos[2], z = pos[3]}) end
            if obj.name == "Boss" then
              brownBag.takeObject({
                position = {pos[1] + 2.89, pos[2] + 0.13, pos[3] + 1.86},
                rotation = {0, 180, 180},
                smooth = false,
                guid = obj.guid,
              })
              wait(takeDelay)
            elseif obj.name:find("Stat Sheet") then
              brownBag.takeObject({
                position = {pos[1] - 2.07, pos[2] + statSheetHeight, pos[3] + 0.5},
                rotation = rotationStatSheet,
                smooth = false,
                guid = obj.guid
              }).lock()
              wait(takeDelay)
            elseif obj.name:find(params.monsterName) then
              if params.monsterName == "Inox Bodyguard" and obj.name == "Inox Bodyguard 1" or params.monsterName ~= "Inox Bodyguard" then
                local boss = brownBag.takeObject({
                  position = monsterPosition,
                  rotation = monsterRotation,
                  smooth = false,
                  guid = obj.guid,
                })
                wait(takeDelay)
                Timer.create({
                  identifier = boss.getGUID() .. "setHealth" .. math.random(0, 10000),
                  function_name = "setHealth",
                  function_owner = self,
                  parameters = {boss, params.monsterName},
                  delay = 0.5
                })
              end
              if params.monsterName == "Inox Bodyguard" and obj.name == "Inox Bodyguard 2" then
                local boss = brownBag.takeObject({
                  position = {pos[1] - bagOffset, pos[2], pos[3]},
                  rotation = monsterRotation,
                  smooth = false,
                  guid = obj.guid,
                })
                wait(takeDelay)
                Timer.create({
                  identifier = boss.getGUID() .. "setHealth" .. math.random(0, 10000),
                  function_name = "setHealth",
                  function_owner = self,
                  parameters = {boss, params.monsterName},
                  delay = 0.5
                })
              end
            end
          else
            if obj.name == params.monsterName .. " " .. params.monsterType then
              figureBag = brownBag.takeObject({
                position = {pos[1] - bagOffset, pos[2], pos[3]},
                rotation = {0.00, 180.00, 0.00},
                smooth = false,
                guid = obj.guid
              })
              wait(takeDelay)
              figureBag.lock()
            elseif obj.name:find("Stat Sheet") then
              brownBag.takeObject({
                position = {pos[1] - 2.07, pos[2] + statSheetHeight, pos[3] + 0.5},
                rotation = rotationStatSheet,
                smooth = false,
                guid = obj.guid
              }).lock()
              wait(takeDelay)
            elseif not obj.name:find("Standee") and not obj.name:find("Horizontal") and not obj.name:find("Vertical") then
              brownBag.takeObject({
                position = {pos[1] + 2.89, pos[2] + 0.13, pos[3] + 1.86},
                rotation = {0, 180, 180},
                smooth = false,
                guid = obj.guid,
              })
              wait(takeDelay)
            end
          end
        end
        local rotation = 0
        local sleevePos = {pos[1] - 2.07, 1.96, pos[3] + 0.5}
        if not boss then
          if monsters[params.monsterName].count > 6 then
            rotation = 180
            sleevePos = {pos[1] - 2.07, 1.82, pos[3] + 0.5}
          end
        end
        getObjectFromGUID("b26c16").takeObject({
          position = sleevePos,
          rotation = {0.00, 0.00, rotation},
          smooth = false
        }).lock()
        broadcastToAll('The Monster, "' .. params.monsterName .. '", has been prepared.', {1, 1, 1})
        brownBag.destruct()
        delay = 3
      else
        if not figureBag and pos == nil then
          broadcastToAll('All 8 Slots are ocupied!', {1, 1, 1})
          return 1
        end
        -- broadcastToAll('The Monster, "' .. params.monsterName .. '", is already on the board!\nTook one monster from this bag.', {1, 1, 1})
        -- figureBag.highlightOn({0, 1, 0}, 5)
      end

      if not boss then
        if params.monsterPosition == nil then
          monsterPosition = getMonsterPos(figureBag.getPosition())
        end
        figure = figureBag.takeObject({
          position = monsterPosition,
          rotation = monsterRotation,
          smooth = false
        })
        wait(takeDelay)
        if params.monsterType == "Standee" then
          Timer.create({
            identifier = figure.getGUID() .. "setTyp" .. math.random(0, 10000),
            function_name = "setTyp",
            function_owner = self,
            parameters = {figure, params.monsterDifficulty},
            delay = delay
          })
        else
          if params.monsterDifficulty == "elite" then
            Timer.create({
              identifier = figure.getGUID() .. "setState" .. math.random(0, 10000),
              function_name = "setState",
              function_owner = self,
              parameters = {figure, 2},
              delay = 0.5
            })
          end
        end
      end
    else
      broadcastToAll('The Monster, "' .. params.monsterName .. '", was not found!', {1, 1, 1})
    end
    return 1
  end
  startLuaCoroutine(self, "spawnMonsterCoRoutine")
end

--Wait Time
function wait(time)
	local start = os.time()
	repeat coroutine.yield(0) until os.time() > start + time
end

function getMonsterPos(figureBagPos)
  local x = -1
  -- 1.71
  local z = -8.34
  if figureBagPos.x > - 46 and figureBagPos.x < - 45 or figureBagPos.x > 20 and figureBagPos.x < 21 then
    x = 1
  end
  if figureBagPos.z < - 15 then
    z = -25.01
  end

  for i = 0, 9 do
    local pos = {figureBagPos.x + x * 1.75 * i, 1.71, z}
    local found = false
    local hitList = Physics.cast({
      origin = pos, direction = {0, 1, 0}, type = 2,
      size = {1, 1, 1}, max_distance = 0, debug = false
    })
    for _, entry in ipairs(hitList) do
      if entry.hit_object.guid ~= "437cd7" and entry.hit_object.guid ~= "dff000" and entry.hit_object.guid ~= "42d2b6" then
        found = true
      end
    end
    if not found then
      return pos
    end
  end
end

function setState(params)
  if params[1] ~= nil then
    local name = params[1].getName()
    params[1].setState(params[2]).setName(name)
  end
end

function setTyp(params)
  if params[1] ~= nil then
    params[1].call("setTyp", {params[2]})
  end
end

function setHealth(params)
  if params[1] ~= nil then
    local health = {
      value = 10,
      max = 10
    }
    local partySheet = nil
    for _, obj in pairs(getAllObjects()) do
      if obj.getDescription() == "Party Sheet" then
        partySheet = obj
      end
    end
    if partySheet ~= nil then
      local level = tonumber(partySheet.UI.getAttribute("scenarioLevel", "text"))
      local playerCount = 0
      for color, i in pairs(Global.getTable("colorToPlayer")) do
        if color ~= "Black" then
          local playerMat = false
          for _, j in pairs(getObjectFromGUID(i.zone).getObjects()) do
            if j.getName():find("Player Mat") then
              playerMat = true
              playerCount = playerCount + 1
            end
          end
          if playerMat then
            Global.UI.setAttribute(i.pre, "active", "true")
          else
            Global.UI.setAttribute(i.pre, "active", "false")
          end
        end
      end
      health.max = tonumber(getObjectFromGUID("6c1b20").getTable("stats")[params[2]][level+1].health:sub(1,-3)) * playerCount
      health.value = health.max
      params[1].setTable("health", health)
    end
    params[1].call("setHealth")
  end
end

function findMonster(monsterName)
  local hitlist = Physics.cast({
    origin = {0, 1, 0},
    direction = {0, 1, 0},
    type = 3,
    size = {100, 2, 50},
    max_distance = 0,
    debug = false
  })
  local nameList = {
    [monsterName .. " Standee"] = true,
    [monsterName .. " Horizontal"] = true,
    [monsterName .. " Vertical"] = true,
    ["Inox Bodyguard 2"] = true
  }
  for _, j in pairs(hitlist) do
    if nameList[j.hit_object.getName()] then
      return j.hit_object
    end
  end
  return false
end

function findFreeSpot()
  local start = {x = 27.56, y = 1.70, z = -12.88}
  local z = {0, 0, 1, 1, 0, 0, 1, 1}
  local pos = {}
  for i = 1, 8 do
    pos = {(start.x + 11.38 * (i > 4 and 1 or 0)) * math.pow(-1, i - 1), start.y, (start.z - 7.58 * z[i])}
    local hitlist = Physics.cast({
      origin = pos,
      direction = {0, 1, 0},
      type = 3,
      size = {10, 1, 6.8},
      max_distance = 0,
      debug = false
    })
    local foundMonster = false
    for _, j in pairs(hitlist) do
      if j.hit_object.getName() == "Monster Mat" then
        foundMonster = true
      end
    end
    if not foundMonster then
      return pos, 7 * math.pow(-1, i) * (i > 4 and 1 or - 1)
    end
  end
  return nil
end

---------------------Rules Book
local currentPage = 1
local currentPageS = 1
local zoomFactor = 1.2
local zoomFactorS = 1.2

function showRules(player, value, id)
  -- spawnAll()
  -- Global.UI.show(id)
  -- Global.UI.setAttribute(id, "active", "true")
  Global.call("showForPlayer", {panel = id, color = player.color})
  local image = "RulesImage"
  local cPage = currentPage
  local pList = pageList
  if id == "ScenarioPanel" then
    image = "ScenarioImage"
    cPage = currentPageS
    pList = pageListS
  end
  Global.UI.setAttribute(image, "image", pList[cPage])
end

function RulesClicked(player, value, id)
  local nextPage = "nextPage"
  local previousPage = "previousPage"
  local CurrentPageCount = "CurrentPageCount"
  local image = "RulesImage"
  local cPage = currentPage
  local pList = pageList
  local panel = "RulesPanel"
  local imageScroll = "imageScroll"
  local zF = zoomFactor

  if id:sub(-1) == "S" then
    nextPage = "nextPageS"
    previousPage = "previousPageS"
    CurrentPageCount = "CurrentPageCountS"
    image = "ScenarioImage"
    cPage = currentPageS
    pList = pageListS
    panel = "ScenarioPanel"
    imageScroll = "imageScrollS"
    zF = zoomFactorS
  end


  if id:find("closeButton") then
    -- Global.UI.hide(panel)
    Global.call("showForPlayer", {panel = panel, color = player.color})
  elseif id == "index" then
    Global.UI.setAttribute(CurrentPageCount, "text", 53)
    Global.UI.setAttribute(image, "image", pList[53])
    if Global.UI.getAttribute(nextPage, "active") == "false" then
      Global.UI.setAttribute(nextPage, "active", "true")
    end
    if Global.UI.getAttribute(previousPage, "active") == "false" then
      Global.UI.setAttribute(previousPage, "active", "true")
    end
    currentPage = 53
  elseif id:find("nextPage") then
    if cPage < #pList then
      cPage = cPage + 1
      if cPage == #pList then --if on the last page
        Global.UI.setAttribute(nextPage, "active", "false")
      else
        --turn on next button if it's off
        if Global.UI.getAttribute(nextPage, "active") == "false" then
          Global.UI.setAttribute(nextPage, "active", "true")
        end
      end
      --Turn on previous button if it's off
      if Global.UI.getAttribute(previousPage, "active") == "false" then
        Global.UI.setAttribute(previousPage, "active", "true")
      end
      Global.UI.setAttribute(CurrentPageCount, "text", cPage)
      Global.UI.setAttribute(image, "image", pList[cPage])
      if id:sub(-1) == "S" then
        currentPageS = cPage
      else
        currentPage = cPage
      end
    end
  elseif id:find("previousPage") then
    if cPage > 1 then
      cPage = cPage - 1
      if cPage == 1 then --if on the first page
        Global.UI.setAttribute(previousPage, "active", "false")
      else
        --turn on previous button if it's off
        if Global.UI.getAttribute(previousPage, "active") == "false" then
          Global.UI.setAttribute(previousPage, "active", "true")
        end
      end
      --Turn on next button if it's off
      if Global.UI.getAttribute(nextPage, "active") == "false" then
        Global.UI.setAttribute(nextPage, "active", "true")
      end
      Global.UI.setAttribute(CurrentPageCount, "text", cPage)
      Global.UI.setAttribute(image, "image", pList[cPage])
      if id:sub(-1) == "S" then
        currentPageS = cPage
      else
        currentPage = cPage
      end
    end
  elseif id:find("zoomInButton") then
    local newWidth = tonumber(Global.UI.getAttribute(image, "width")) * zF
    local newHeight = tonumber(Global.UI.getAttribute(image, "height")) * zF
    Global.UI.setAttribute(image, "width", tostring(newWidth))
    Global.UI.setAttribute(image, "height", tostring(newHeight))
  elseif id:find("zoomOutButton") then
    local newWidth = tonumber(Global.UI.getAttribute(image, "width")) / zF
    local newHeight = tonumber(Global.UI.getAttribute(image, "height")) / zF
    Global.UI.setAttribute(image, "width", tostring(newWidth))
    Global.UI.setAttribute(image, "height", tostring(newHeight))
  elseif id:find("widenButton") then
    local newWidth = Global.UI.getAttribute(imageScroll, "width") * zF
    Global.UI.setAttribute(imageScroll, "width", tostring(newWidth))
    newWidth = Global.UI.getAttribute(panel, "width") * zF
    Global.UI.setAttribute(panel, "width", tostring(newWidth))
  elseif id:find("narrowButton") then
    local newWidth = Global.UI.getAttribute(imageScroll, "width") / zF
    Global.UI.setAttribute(imageScroll, "width", tostring(newWidth))
    newWidth = Global.UI.getAttribute(panel, "width") / zF
    Global.UI.setAttribute(panel, "width", tostring(newWidth))
  end
end

function onEndEditZoomPercentage(player, value, id)
  local InputZoomMultiplier = "InputZoomMultiplier"
  local zF = zoomFactor
  if id:sub(-1) == "S" then
    InputZoomMultiplier = "InputZoomMultiplierS"
    zF = zoomFactorS
  end

  if value == "" then
    Global.UI.setAttribute(InputZoomMultiplier, "text", zF * 100)
    return
  end

  if value + 0 <= 100 then
    broadcastToColor("Zoom value must be above 100", player.color, stringColorToRGB("Red"))
  else
    zF = value / 100
  end

  if id:sub(-1) == "S" then
    zoomFactorS = zF
  else
    zoomFactor = zF
  end

end

function onEndEditCurrentPage(player, value, id)
  local nextPage = "nextPage"
  local previousPage = "previousPage"
  local CurrentPageCount = "CurrentPageCount"
  local image = "RulesImage"
  local previousCurrentPage = currentPage
  local pList = pageList

  if id:sub(-1) == "S" then
    nextPage = "nextPageS"
    previousPage = "previousPageS"
    CurrentPageCount = "CurrentPageCountS"
    image = "ScenarioImage"
    previousCurrentPage = currentPageS
    pList = pageListS
  end

  if value == "" then
    Global.UI.setAttribute(CurrentPageCount, "text", previousCurrentPage)
    return
  end

  local cPage = value + 0
  if cPage <= #pList and cPage > 0 then
    if cPage == #pList then --if on the last page
      Global.UI.setAttribute(nextPage, "active", "false")
      Global.UI.setAttribute(previousPage, "active", "true")
    elseif cPage == 1 then
      Global.UI.setAttribute(previousPage, "active", "false")
      Global.UI.setAttribute(nextPage, "active", "true")
    else -- if in between first and last page
      Global.UI.setAttribute(nextPage, "active", "true")
      Global.UI.setAttribute(previousPage, "active", "true")
    end
    Global.UI.setAttribute(CurrentPageCount, "text", cPage)
    Global.UI.setAttribute(image, "image", pList[cPage])
    if id:sub(-1) == "S" then
      currentPageS = cPage
    else
      currentPage = cPage
    end
  else
    Global.UI.setAttribute("CurrentPageCount", "text", previousCurrentPage)
    broadcastToColor("You must type a number between 1 and "..#pList, player.color, stringColorToRGB("Red"))
  end
end
-----------------Rules Book

function spawnAll()
  startLuaCoroutine(self, "coSpawnAll")
end

function coSpawnAll()
  local board = getObjectFromGUID("437cd7")
  local count = 1
  local pos = {x = -45.94, y = 1.70, z = 15.91} -- -44.19
  for i,j in pairs(monsters) do
    if i ~= "Vicious Drake" then
      spawnMonster({monsterName = i, monsterPosition = {pos.x + count * 1.75, pos.y, pos.z}, monsterDifficulty = "normal", monsterType = "Vertical"})
      if count % 8 == 0 then
        wait(10)
        board.call("cleanMonster")
        wait(1)
      end
      count = count + 1
    end
  end
  spawnMonster({monsterName = "Inox Bodyguard", monsterPosition = {pos.x + count * 1.75, pos.y, pos.z}, monsterDifficulty = "normal", monsterType = "Standee"})
  return 1
end

function wait(time)
	local start = os.time()
	repeat coroutine.yield(0) until os.time() > start + time
end

monsters = {
  ["Ancient Artillery"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = -5},
  ["Bandit Guard"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 10},
  ["Bandit Archer"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 10},
  ["Black Imp"] = {count = 10, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = -10},
  ["Cave Bear"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = -5},
  ["City Guard"] = {count = 6, rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 10},
  ["City Archer"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 10},
  ["Cultist"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 10},
  ["Deep Terror"] = {count = 10, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = -10},
  ["Earth Demon"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 35},
  ["Flame Demon"] = {count = 6, rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 10},
  ["Forest Imp"] = {count = 10, rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = -15},
  ["Frost Demon"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 5},
  ["Giant Viper"] = {count = 10, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = -10},
  ["Harrower Infester"] = {count = 4, rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 10},
  ["Hound"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = -20},
  ["Inox Guard"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 35},
  ["Inox Archer"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 35},
  ["Inox Shaman"] = {count = 4, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 35},
  ["Living Bones"] = {count = 10, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 10},
  ["Living Corpse"] = {count = 6, rotationStatSheet = {0.00, 90.00, 0.00}, HPBarOffset = 10},
  ["Living Spirit"] = {count = 6, rotationStatSheet = {0.00, 180.00, 180.00}, HPBarOffset = 10},
  ["Lurker"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 30},
  ["Night Demon"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 10},
  ["Ooze"] = {count = 10, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 0},
  ["Rending Drake"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = -10},
  ["Savvas Icestorm"] = {count = 4, rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 10},
  ["Savvas Lavaflow"] = {count = 4, rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 10},
  ["Spitting Drake"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = -5},
  ["Sun Demon"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 10},
  ["Stone Golem"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 40},
  ["Vermling Scout"] = {count = 10, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = -5},
  ["Vermling Shaman"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = -5},
  ["Wind Demon"] = {count = 6, rotationStatSheet = {0.00, 180.00, 0.00}, HPBarOffset = 10},
  ["Bandit Commander"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 20},
  ["Captain of the Guard"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 15},
  ["Dark Rider"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 40},
  ["Elder Drake"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 40},
  ["Jekserah"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 15},
  ["Merciless Overseer"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 15},
  ["Prime Demon"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 55},
  ["The Betrayer"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 20},
  ["The Colorless"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 30},
  ["The Gloom"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 30},
  ["The Sightless Eye"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 25},
  ["Winged Horror"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 35},
  ["Inox Bodyguard"] = {rotationStatSheet = {0.00, 270.00, 0.00}, HPBarOffset = 35}
}
monsters["Vicious Drake"] = monsters["Rending Drake"]